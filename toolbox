#!/usr/bin/bash
SHELL=/usr/bin/bash
#
# Detect the source where ToolBox is run from to be able to Update it
_toolbox_sourcefile() {
  SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  TARGET="$(readlink "$SOURCE")"
  if [[ $TARGET == /* ]]; then
    #echo "SOURCE '$SOURCE' is an absolute symlink to '$TARGET'"
    SOURCE="$TARGET"
  else
    DIR="$( dirname "$SOURCE" )"
    #echo "SOURCE '$SOURCE' is a relative symlink to '$TARGET' (relative to '$DIR')"
    SOURCE="$DIR/$TARGET" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
  fi
done
echo "SOURCE is '$SOURCE'"
RDIR="$( dirname "$SOURCE" )"
DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
if [ "$DIR" != "$RDIR" ]; then
  echo "DIR '$RDIR' resolves to '$DIR'"
fi
#echo "DIR is '$DIR'"
rm $HOME/.cache/toolbox/update-cache/toolboxpath.txt &>/dev/null
echo "$DIR" >> $HOME/.cache/toolbox/update-cache/toolboxpath.txt
}
#
# Download latest version of PacUI - Releasecompare - Manjao Update
# =======================
#
_toolbox_first_check() {
  if [[ -f toolbox.txt ]]
	then
		#echo " file found ... "
    return;

  else
    wget https://github.com/puxplaying/ToolBox/commits/master &>/dev/null
    grep -owPc "Commits on *" master | tee toolbox.txt &>/dev/null
    rm -rf master

	fi
}
#
_toolbox_version_check() {
  cd $HOME/.cache/toolbox/update-cache
  REMOTEMD5=$(md5sum 'toolbox.txt' | cut -d" " -f1)
  LOCALMD5=$(md5sum 'toolbox_online.txt' | cut -d" " -f1)
  wget https://github.com/puxplaying/ToolBox/commits/master &>/dev/null
  grep -owPc "Commits on *" master | tee toolbox_online.txt &>/dev/null
  rm -rf master

  if [ "$LOCALMD5" == "$REMOTEMD5" ]
  then
  echo -e "\e[1m ToolBox \e[0m- is Up to date!"
  else
  echo -e "no match, Local:"$LOCALMD5"\nRemote:"$REMOTEMD5
  echo "Starting Update ..."
  toolbox="cat toolboxpath.txt"
  cd $toolbox
  rm -rf toolbox
  wget https://raw.githubusercontent.com/puxplaying/ToolBox/master/toolbox
  chmod a+rx toolbox

fi
}
#
_manjaro_update_first_check() {
	if [[ -f manjaro_update.txt ]]
	then
		#echo " file found ... "
    return;

  else
    wget https://github.com/puxplaying/manjaro-update/commits/master &>/dev/null
    grep -owPc "Commits on *" master | tee manjaro_update.txt &>/dev/null
    rm -rf master

	fi
}
#
_manjaro_update_version_check() {
  cd $HOME/.cache/toolbox/update-cache
  REMOTEMD5=$(md5sum 'manjaro_update.txt' | cut -d" " -f1)
  LOCALMD5=$(md5sum 'manjaro_update_online.txt' | cut -d" " -f1)
  wget https://github.com/puxplaying/manjaro-update/commits/master &>/dev/null
  grep -owPc "Commits on *" master | tee manjaro_update_online.txt &>/dev/null
  rm -rf master

  if [ "$LOCALMD5" == "$REMOTEMD5" ]
  then
  echo -e "\e[1m manjaro_update \e[0m- is Up to date!"
  else
  echo -e "no match, Local:"$LOCALMD5"\nRemote:"$REMOTEMD5
  echo "Starting Update ..."
  cd $HOME/.cache/toolbox
  rm -rf manjaro_update
  wget https://raw.githubusercontent.com/puxplaying/manjaro-update/master/manjaro_update
  chmod a+rx manjaro_update

fi
}
#
_releasecompare_first_check() {
  if [[ -f releasecompare.txt ]]
	then
		#echo " file found ... "
    return;

  else
    wget https://github.com/puxplaying/releasecompare/commits/master &>/dev/null
    grep -owPc "Commits on *" master | tee releasecompare.txt &>/dev/null
    rm -rf master

	fi
}
#
_releasecompare_version_check() {
  cd $HOME/.cache/toolbox/update-cache
  REMOTEMD5=$(md5sum 'releasecompare.txt' | cut -d" " -f1)
  LOCALMD5=$(md5sum 'releasecompare_online.txt' | cut -d" " -f1)
  wget https://github.com/puxplaying/releasecompare/commits/master &>/dev/null
  grep -owPc "Commits on *" master | tee releasecompare_online.txt &>/dev/null
  rm -rf master

  if [ "$LOCALMD5" == "$REMOTEMD5" ]
  then
  echo -e "\e[1m releasecompare \e[0m- is Up to date!"
  else
  echo -e "no match, Local:"$LOCALMD5"\nRemote:"$REMOTEMD5
  echo "Starting Update ..."
  cd $HOME/.cache/toolbox
  rm -rf releasecompare
  wget https://raw.githubusercontent.com/puxplaying/releasecompare/master/releasecompare
  chmod a+rx releasecompare

fi
}
#
_pacui_first_check() {
  if [[ -f pacui.txt ]]
	then
		#echo " file found ... "
    return;

  else
    wget https://github.com/excalibur1234/pacui/commits/master &>/dev/null
    grep -owPc "Commits on *" master | tee pacui.txt &>/dev/null
    rm -rf master

	fi
}
#
_pacui_version_check() {
  cd $HOME/.cache/toolbox/update-cache
  REMOTEMD5=$(md5sum 'pacui.txt' | cut -d" " -f1)
  LOCALMD5=$(md5sum 'pacui_online.txt' | cut -d" " -f1)
  wget https://github.com/excalibur1234/pacui/commits/master &>/dev/null
  grep -owPc "Commits on *" master | tee pacui_online.txt &>/dev/null
  rm -rf master

  if [ "$LOCALMD5" == "$REMOTEMD5" ]
  then
  echo -e "\e[1m PacUI \e[0m- is Up to date!"
  else
  echo -e "no match, Local:"$LOCALMD5"\nRemote:"$REMOTEMD5
  echo "Starting Update ..."
  cd $HOME/.cache/toolbox
  rm -rf pacui
  wget https://raw.githubusercontent.com/excalibur1234/pacui/master/pacui
  chmod a+rx pacui

fi
}
#
# =======================
# Update Checker
_update_check() {
  test -d "$HOME/.cache/toolbox/update-cache" || mkdir -p "$HOME/.cache/toolbox/update-cache" && cd $HOME/.cache/toolbox/update-cache
  echo "Checking for Updates ..."
  _manjaro_update_version_check
  _releasecompare_version_check
  _pacui_version_check
  _toolbox_version_check

}
#
# =======================
# Make a update check option for everything and try to replace cmatrix
_initupdate() {
  if [ ! -d "$HOME/.cache/toolbox" ]
  then
    echo "ToolBox Data not found!"
    echo "Downloading ..."
    # Get all requiered scripts online to be up to date
    test -d "$HOME/.cache/toolbox" || mkdir -p "$HOME/.cache/toolbox" && cd $HOME/.cache/toolbox
    wget https://raw.githubusercontent.com/puxplaying/manjaro-update/master/manjaro_update &>/dev/null
    wget https://raw.githubusercontent.com/puxplaying/releasecompare/master/releasecompare &>/dev/null
    wget https://raw.githubusercontent.com/excalibur1234/pacui/master/pacui &>/dev/null
    # wget toolbox .... nicht vergessen
    chmod a+rx pacui releasecompare manjaro_update
    test -d "$HOME/.cache/toolbox/update-cache" || mkdir -p "$HOME/.cache/toolbox/update-cache" && cd $HOME/.cache/toolbox/update-cache
    _manjaro_update_first_check
    _releasecompare_first_check
    _pacui_first_check
    _toolbox_first_check

  else
    echo "ToolBox Data found!"
    _toolbox_sourcefile

  fi
}
# =======================
_initupdate
#
# =======================
_releasecompare_startmenu() {
  echo ""
  echo -e "\e[7m This tool will compare the latest Manjaro release to the local system \e[0m"
  echo -e "\e[7m to see which applications may have been added to new releases! \e[0m"
  echo ""
  echo -e "\e[7m Chose what to do! \e[0m"
  echo ""
  echo "  1) Compare only"
  echo "  2) Installation Options"
  echo "  3) Quit"
read -r choice
case "$choice" in
        1)
            echo "you chose to compare only"
            sh $HOME/.cache/toolbox/releasecompare
            ;;
        2)
            echo "you chose Installation Options"
            sh $HOME/.cache/toolbox/releasecompare install
            ;;
        3|q|quit)
            exit
            ;;
        * ) echo "invalid option $REPLY"
            ;;
    esac
}
#
# =======================
# UI code is below
function ui_clean
{
        # the traditional "clear" command does not work as expected on all systems. problem: the terminal history of all previous commands is deleted when the "clear" command is used. solution: do everything i expect from "clear" manually. this keeps the terminal history:

        local lines
        # number of lines of the user's terminal.
        lines="$( tput lines )"
        for (( i=1; i<lines; i++ ))
        do
                # insert "lines" number of empty lines:
                echo
        done

        # move cursor to the top left of the terminal
        tput cup 0 0
}



# Run infinite loop for UI / menu, till the user quits using the "quit" option or CTRL+C.
while true
do

    ui_clean                                                                     # clear the terminal screen

    # draw UI / menu. please note the use of ANSI Escape sequences mentioned at the top. The text/code can be hard to read and should be changed carefully: spaces are important here!
    echo
    echo -e "                                  \e[7m ToolBox \e[0m                                     "
    echo -e "      *---------------------------------------------------------------*"
    echo -e "      |   \e[7m 1 \e[0m  \e[1mS\e[0mystem Update          |   \e[7m 2 \e[0m  \e[1mR\e[0melease Compare        |"
    echo -e "      |-------------------------------|-------------------------------|"
    echo -e "      |   \e[7m 3 \e[0m  \e[1mS\e[0mystem \e[1mI\e[0mnformation     |   \e[7m 4 \e[0m  \e[1mS\e[0mhow Journal \e[1mE\e[0mrrors    |"
    echo -e "      |-------------------------------|-------------------------------|"
    echo -e "      |   \e[7m 5 \e[0m  \e[1mD\e[0mmesg                  |   \e[7m 6 \e[0m  CPU \e[1mF\e[0mrequency Info     |"
    echo -e "      |-------------------------------|-------------------------------|"
    echo -e "      |   \e[7m 7 \e[0m  \e[1mP\e[0macUI (Git Version)    |   \e[7m 8 \e[0m  \e[1mT\e[0mranslate \e[1mS\e[0mhell        |"
    echo -e "      *---------------------------------------------------------------*"
    echo -e "          \e[7m00 \e[0m  \e[1mU\e[0mpdate ToolBox applications"
    echo ""
    echo -e "               Enter number or marked letter(s)   -   \e[7m 0 \e[0m \e[1mQ\e[0muit "

    # save entered numbers/letters in variable "choice"
    read -r choice
    # convert "choice" variable to lowercase:
    choice="$(echo "$choice" | tr '[:upper:]' '[:lower:]' )"
    echo


    # test, whether "choice" fits any of the following numbers, letters, or words
    case "$choice" in

        1|s|update|system-update )                                                  # the following commands will get executed if $choice is "1" or "u" or "update" until a code line containing only ";;" is encountered
            cd "$HOME/.cache/toolbox"
            ./manjaro_update
            echo
            echo -e " \e[41m System updated. To return to ToolBox press ENTER \e[0m"
            # wait for input, e.g. by pressing ENTER:
            read -r
            ;;
        2|r|release|release-compare )
            _releasecompare_startmenu
            echo
            echo -e " \e[41m Comparision finished. To return to ToolBox press ENTER \e[0m"
            read -r
            ;;
        3|si|system|system-information )
            inxi -Fxxxza --no-host
            echo
            df -h
            echo
            lsblk
            echo
            echo -e " \e[41m Displaying System Information. To return to ToolBox press ENTER \e[0m"
            read -r
            ;;
        4|se|show|show-system-errors )
            journalctl -p 3 -xb
            echo
            echo -e " \e[41m Displaying journalctl errors. To return to ToolBox press ENTER \e[0m"
            read -r
            ;;
        5|d|dmesg )
            sudo dmesg | less
            echo
            echo -e " \e[41m Displaying dmesg. To return to ToolBox press ENTER \e[0m"
            read -r
            ;;
        6|f|frequency|frequency-info )
            cpupower frequency-info
            echo
            echo -e " \e[41m Displaying frequency-info. To return to ToolBox press ENTER \e[0m"
            read -r
            ;;
        7|p|pacui )
            cd "$HOME/.cache/toolbox"
            ./pacui
            echo
            ;;
        8|t|ts|translate|translate-shell )
            gawk -f <(curl -Ls git.io/translate) -- -shell
            echo
            ;;

        00|U|u )
            _update_check
            echo
            echo -e " \e[41m Update finished. To return to ToolBox press ENTER \e[0m"
            read -r
            ;;

        0|q|quit|$'\e'|$'\e'$'\e' )
            ui_clean && exit                                                     # clear terminal screen first (alternatively, "reset" works as well, but then the terminal history is lost). the "exit" command quits terminal ui.
            ;;


        * )                                                                         # do this, if $choice variable contains anything else not offered above
            echo -e " \e[41m Wrong option \e[0m"
            echo -e "  Please try again...  "
            sleep 2
            ;;

    esac                                                                            # close case-loop

# now, the infinite while-loop will start again from its top by clearing the terminal screen and redrawing the UI

done                                                                                # close while-loop
